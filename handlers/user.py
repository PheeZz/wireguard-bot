from loguru import logger
from os import remove
from io import BytesIO
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hcode, hlink

from middlewares import rate_limit
import keyboards as kb

import database
from loader import bot
from data import configuration
from loader import vpn_config
from database import selector

from utils.fsm import NewConfig, NewPayment
from utils.qr_code import create_qr_code_from_peer_data


@rate_limit(limit=5)
async def cmd_start(message: types.Message) -> types.Message:
    if not message.from_user.username:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–£ —Ç–µ–±—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username, —É—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∏ –Ω–∞–ø–∏—à–∏ /start\n"
            f"–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - –ø–æ—Å–º–æ—Ç—Ä–∏ {hlink('—Å–ø—Ä–∞–≤–∫—É', 'https://silverweb.by/kak-sozdat-nik-v-telegramm/')}",
            parse_mode=types.ParseMode.HTML,
        )
        return
    if database.selector.is_exist_user(message.from_user.id):
        if database.selector.is_subscription_end(message.from_user.id):
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –æ–ø–ª–∞—Ç–∏ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN",
                reply_markup=await kb.free_user_kb(message.from_user.id),
            )
        else:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}, —Ç–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {database.selector.get_subscription_end_date(message.from_user.id)}",
                reply_markup=await kb.payed_user_kb(),
            )
        return

    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name or message.from_user.username}!\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –æ–ø–ª–∞—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É",
        reply_markup=await kb.free_user_kb(message.from_user.id),
    )
    await bot.send_message(
        message.from_user.id,
        "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ "
        f"{hlink('—Å—Ç—Ä–∞–Ω–∏—Ü–µ','https://telegra.ph/FAQ-po-botu-01-08')}, "
        "–æ–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ —É—Å–ª–æ–≤–∏—è–º–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤, —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –≤ —Å—Ç–∞—Ç—å–µ –≤—ã—à–µ.",
        parse_mode=types.ParseMode.HTML,
    )
    database.insert_new_user(message)

    # notify admin about new user
    for admin in configuration.admins:
        # format: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ò–º—è (id: id), username, id like code format in markdown
        await bot.send_message(
            admin,
            f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {hcode(message.from_user.full_name)}\n"
            f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)}",
            parse_mode=types.ParseMode.HTML,
        )


@rate_limit(limit=5)
async def cmd_pay(message: types.Message, state: FSMContext) -> types.Message:
    # –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –ø–æ—ç—Ç–æ–º—É –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    await NewPayment.payment_image.set()
    await bot.send_message(
        message.from_user.id,
        "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –±–æ—Ç–µ."
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {configuration.base_subscription_monthly_price_rubles}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É {hcode(configuration.payment_card)} "
        "–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        parse_mode=types.ParseMode.HTML,
        reply_markup=await kb.cancel_payment_kb(),
    )


@rate_limit(limit=5)
async def got_payment_screenshot(message: types.Message, state: FSMContext):
    if message.content_type != "photo":
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞/–æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É.")
    await state.finish()
    # forwards screenshot to admin
    for admin in configuration.admins:
        await message.forward(admin)
        give_help_command = f"/give {message.from_user.id} 30"
        await bot.send_message(
            admin,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name}\n"
            f"id: {hcode(message.from_user.id)}, username: {hcode(message.from_user.username)} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ VPN.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ VPN –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            f"{hcode(give_help_command)}",
            parse_mode=types.ParseMode.HTML,
        )


async def cancel_payment(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await query.message.edit_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)


# successful payment
async def successful_payment_handler(message: types.Message):
    database.update_user_payment(message.from_user.id)
    database.insert_new_payment(message)
    if database.selector.is_user_have_config(message.from_user.id):
        try:
            vpn_config.reconnect_payed_user(message.from_user.id)
        except Exception as e:
            logger.error(e)

    await message.answer(
        f"{message.from_user.full_name or message.from_user.username}, —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {database.selector.get_subscription_end_date(message.from_user.id)}",
        reply_markup=await kb.payed_user_kb(),
    )


async def cmd_my_configs(message: types.Message):
    if database.selector.all_user_configs(message.from_user.id):
        await message.answer(
            "–û—Ç–æ–±—Ä–∞–∂–∞—é —Ç–≤–æ–∏ –∫–æ–Ω—Ñ–∏–≥–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö",
            reply_markup=await kb.configs_kb(message.from_user.id),
        )
    else:
        await message.answer(
            "–£ —Ç–µ–±—è –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤",
            reply_markup=await kb.configs_kb(message.from_user.id),
        )


async def cmd_menu(message: types.Message):
    if database.selector.is_subscription_end(message.from_user.id):
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=await kb.free_user_kb(message.from_user.id),
        )
    else:
        await message.answer(
            "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=await kb.payed_user_kb()
        )


@rate_limit(limit=5)
async def create_new_config(message: types.Message, state=FSMContext):
    await message.answer(
        "–î–ª—è –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ç—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥?",
        reply_markup=await kb.device_kb(message.from_user.id),
    )
    await NewConfig.device.set()


async def device_selected(call: types.CallbackQuery, state=FSMContext):
    """
    This handler will be called when user presses `pc` or `phone` button
    """
    await state.update_data(device=call.data)
    # edit message text and delete keyboard from message
    device = "üíª –ü–ö" if call.data.startswith("pc") else "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω"
    await call.message.edit_text(
        f"–¢—ã –≤—ã–±—Ä–∞–ª {device}, –ø—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥–∞", reply_markup=None
    )
    await state.finish()

    # add +1 to user config count
    database.update_user_config_count(call.from_user.id)

    device = "PC" if call.data.startswith("pc") else "PHONE"
    user_config = vpn_config.update_server_config(
        username=call.from_user.username, device=device
    )

    database.insert_new_config(
        user_id=call.from_user.id,
        username=call.from_user.username,
        device=device,
        config=user_config,
    )

    io_config_file = BytesIO(user_config.encode("utf-8"))
    filename = f"{configuration.configs_prefix}_{call.from_user.username}_{device}.conf"

    # send config file
    await call.message.answer_document(
        types.InputFile(
            io_config_file,
            filename=filename,
        ),
        reply_markup=await kb.configs_kb(call.from_user.id),
    )

    if device == "PHONE":
        config_qr_code = create_qr_code_from_peer_data(user_config)
        await call.message.answer_photo(
            types.InputFile(
                config_qr_code,
                filename=f"{configuration.configs_prefix}_{call.from_user.username}.png",
            ),
        )


async def cancel_config_creation(call: types.CallbackQuery, state=FSMContext):
    await state.finish()
    await call.message.edit_text("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞", reply_markup=None)


@rate_limit(limit=5)
async def cmd_show_config(message: types.Message, state=FSMContext):
    if message.text.lower().endswith("–ø–∫"):
        device = "PC"
    elif message.text.lower().endswith("—Å–º–∞—Ä—Ç—Ñ–æ–Ω"):
        device = "PHONE"

    config = database.selector.get_user_config(
        user_id=message.from_user.id,
        config_name=f"{message.from_user.username}_{device}",
    )
    filename = (
        f"{configuration.configs_prefix}_{message.from_user.username}_{device}.conf"
    )
    io_config_file = BytesIO(config.encode("utf-8"))

    if device == "PC":
        # send config file
        await message.answer_document(
            types.InputFile(
                io_config_file,
                filename=filename,
            ),
        )

    if device == "PHONE":
        # firstly create qr code image, then send it with config file
        # this method is used for restrict delay between sending file and photo
        image_filename = (
            f"{configuration.configs_prefix}_{message.from_user.username}.png"
        )
        config_qr_code = create_qr_code_from_peer_data(config)

        await message.answer_document(
            types.InputFile(
                io_config_file,
                filename=filename,
            ),
        )

        await message.answer_photo(
            types.InputFile(
                config_qr_code,
                filename=image_filename,
            ),
        )


@rate_limit(limit=5)
async def cmd_support(message: types.Message):
    # send telegraph page with support info (link: https://telegra.ph/FAQ-po-botu-01-08)
    await message.answer(
        f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ {hlink('—Å—Ç—Ä–∞–Ω–∏—Ü–µ','https://telegra.ph/FAQ-po-botu-01-08')}",
        parse_mode=types.ParseMode.HTML,
    )

    admin_username = selector.get_username_by_id(configuration.admins[0])
    admin_telegram_link = f"t.me/{admin_username}"
    await message.answer(
        f"–ï—Å–ª–∏ —É —Ç–µ–±—è –≤—Å–µ –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å {hlink('–º–Ω–µ',admin_telegram_link)} –ª–∏—á–Ω–æ",
        parse_mode=types.ParseMode.HTML,
    )


@rate_limit(limit=5)
async def cmd_show_end_time(message: types.Message):
    # show user end time
    await message.answer(
        f"{message.from_user.full_name or message.from_user.username}, "
        f"—Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ VPN –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è {database.selector.get_subscription_end_date(message.from_user.id)}"
    )


@rate_limit(limit=2)
async def cmd_show_subscription(message: types.Message):
    await message.answer(
        f"{message.from_user.full_name or message.from_user.username}, "
        "–∑–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç—å—Å—è —Å–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π",
        reply_markup=await kb.subscription_management_kb(),
    )


@rate_limit(limit=3600)
async def cmd_reboot_wg_service(message: types.Message):
    await message.answer("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ WireGuard...")
    vpn_config.restart_service()
    await message.answer("–°–µ—Ä–≤–∏—Å WireGuard –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")
